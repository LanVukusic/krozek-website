---
title: "Listi"
description: "Listi in podatkovne strukture"
pubDate: "dec 9 2023"
heroImage: "/blog-placeholder-2.jpg"
---

Pri programiranju smo uporabljali spremenljivke, kadar smo si želeli vrednosti shraniti.  
Opazili smo lahko, da je ena spremenljivka sedaj držala le eno vrednost. Spremenljivka `ime` je imela vrednost `"Matej"`, `x` vrednost `12` itd.

Kaj pa se zgodi če želimo shraniti več podatkov, kot recimo 50 imen naših uporabnikov ali pa nabor vseh praštevil do števila N?  
Takrat potrebujemo nekakšno `PODATKOVNO STRUKTURO`

> `Podatkovne strukture` nam omogočajo učinkovito hranjenje podatkov v računalniškem spominu, njihovo branje, pisanje ter spreminjanje.  
> Ogledali si bomo `list` ali seznam, ki je ena od enostavnejših in najbol pogosto rabljenih struktur.

Ob tem je potrebno opozoriti tudi, da podatki hranjeni na takšen način **niso** `persistentni`.

> `Persistentni` podatki, ostaneju tudi takrat, ko se program zaustavi. S takšnim hranjenjem se bomo srečali pri poglavju o datotekah, do takrat pa se bodo podatki z vsakim zagonom programa resetirali.

## Python implementacija

Python ponuja implementacijo strukture `list` kot del jezika. Poglejmo si primer:  
Podroben opis implementacije je dostopen na [uradni dokumentaciji](https://docs.python.org/3/tutorial/datastructures.html#more-on-lists), **ogromno** odgovorov pa dobite tudi z preprostim iskanjem na googlu.

```py
  imena = [ "lan", "matej", "andraz", "peter" ]
  prastevila = [2, 3, 5, 7, 11, 13]

  print(imena)
  # ['lan', 'matej', 'andraz', 'peter']
  print(prastevila)
  # [2, 3, 5, 7, 11, 13]

```

V primeru smo ustvarili dve spremenljivki: `imena` in `prastevila`. Obe spremenljivki sta tipa `List`.  
Opazimo lahko da list deluje kot neka zbirka podatkov, kamor lahko ustavimo poljubne vrednosti.

> Python nam dovoljuje tudi liste tipa.  
> `[1, "ojla", 2j, [], None]`.  
> V enem samem listu imamo lahko poljubno število različnih tipov spremenljivk kar je **GROZNO**.  
> Tega prosim **ne počnite!!**

Podatke hočemo seveda tudi brati, jih dodajati, odvzemati itd.  
Poglejmo si še osnovne operacije nad listi.

## Operacije nad listi

Od standardnih operacij, listi podpirajo le `+`. To "seštevanje" je definirano kot operacija urejene unije.  
Na enostaven način lahko preverimo, da `[1, 2, 3] + [4, 5, 6]` vrne urejeno unijo teh dveh listov: `[1, 2, 3, 4, 5, 6]`

Ob tej ugotovitvi se je potrebno ustaviti ter si zapomniti, da so listi `Urejena podatkona struktura` kar pomeni le, da je vrstni red elementov pomemben. Z pozicijo elementa (oz njegovim `indeksom`) namreč kličemo večino funkcij, ki jih list omogoča.
